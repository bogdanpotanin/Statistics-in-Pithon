# --------
# Потанин Богдан Станиславович
# Математическая Статистика в Python
# Урок 9. Доверительные интервалы для выборок из
#         нормального распределения
# --------

import sys
import math
import pandas as pd
import numpy as np
import scipy
import matplotlib.pyplot as plt
import seaborn
from scipy.stats import t, chi2, f, norm, poisson, \
     binom, uniform, multivariate_normal, expon
from scipy.optimize import approx_fprime, minimize, line_search

np.set_printoptions(suppress = True)              # уберем scientific notation

# --------
# Часть №1. Доверительный интервал для
#           математического ожидания
# --------

# Сгенерируем выборку из
# нормального распределения
np.random.seed(123)                               # для воспроизводимости результатов, полученных с использованием
n = 20                                            # объем выборки
mu = 5                                            # математическое ожидание
sigma = 10                                        # стандартное отклонение
x = norm.rvs(mu, sigma, n)                        # реализация выборки из нормального распределения
                                                  # с соответствующими параметрами

# Посчитаем некоторые предварительные значения
x_mean = np.mean(x)                               # выборочное среднее
x_var = np.var(x, ddof = 1)                       # исправленная (скорректированная) выборочная дисперсия

# Построим симметричный (1-a)*100-процентный доверительный
# интервал для параметра mu (математического ожидания)
a = 0.05                                                # уровень доверия (1 - a), например,
                                                        # при a = 0.05 получаем уровень доверия 0.95
    # при известной дисперсии
z = norm.ppf(a / 2)                                     # квантиль уровня (a / 2) стандартного
                                                        # нормального распределения
ci1_left = x_mean + z * sigma / np.sqrt(n)              # реализация левой границы доверительного интервала
ci1_right = x_mean - z * sigma / np.sqrt(n)             # реализация правой границы доверительного интервала
ci1 = [ci1_left, ci1_right]                             # реализация доверительного интеврала
    # при неизвестной дисперсии
s = t.ppf(a / 2, df = n - 1)                            # квантиль уровня (a / 2) распределения
                                                        # Стьбдента с (n - 1) степенью свободы
ci2_left = x_mean + s * np.sqrt(x_var / n)              # реализация левой границы доверительного интервала
ci2_right = x_mean - s * np.sqrt(x_var / n)             # реализация правой границы доверительного интервала
ci2 = [ci2_left, ci2_right]                             # реализация доверительного интеврала

# --------
# Часть №2. Доверительный интервал для
#           дисперсии
# --------

# Построим симметричный (1-a)*100-процентный доверительный
# интервал для параметра дисперсии, то есть для (sigma ^ 2)
a = 0.05                                                # уровень доверия (1 - a), например,
                                                        # при a = 0.05 получаем уровень доверия 0.95
xi_lower = chi2.ppf(a / 2, df = n - 1)                  # квантиль уровня (a / 2) распределения
                                                        # Хи-квадрат с (n - 1) степенью свободы
xi_upper = chi2.ppf(1 - a / 2, df = n - 1)              # квантиль уровня a / 2 распределения
                                                        # Хи-квадрат с (n - 1) степенью свободы
ci3_left = (n - 1) * x_var / xi_upper                   # реализация левой границы доверительного интервала
ci3_right = (n - 1) * x_var / xi_lower                  # реализация правой границы доверительного интервала
ci3 = [ci3_left, ci3_right]                             # реализация доверительного интеврала

# --------
# Часть №3. Эксперименты с доверительными интервалами
# --------

# Сгенерируем m выборок и посмотрим долю случаев,
# когда истинное значение параметра mu попадает
# в реализацию (1-a)*100 доверительного интервала
# при неизвестной дисперсии
np.random.seed(123)                               # для воспроизводимости результатов, полученных с использованием
m = 1000                                          # число экспериментов
n = 20                                            # объем выборки
mu = 5                                            # математическое ожидание
sigma = 10                                        # стандартное отклонение
a = 0.05                                          # уровень доверия (1 - a), например,
                                                  # при a = 0.05 получаем уровень доверия 0.95
is_ci = np.zeros(m)                               # вектор, i-е значение которо принимает значение 1,
                                                  # если параметр mu попадает в реализацию доверительного
                                                  # интервала, построенного по i-й выборке, и 0 - иначе.

for i in range(0, m):
    x_new = norm.rvs(mu, sigma, n)                # очередная выборка
    xn_mean = np.mean(x_new)                      # выборочное среднее
    xn_var = np.var(x_new, ddof = 1)              # исправленная (скорректированная) выборочная дисперсия
    s = t.ppf(a / 2, df = n - 1)                  # квантиль уровня (a / 2) распределения
                                                  # Стьбдента с (n - 1) степенью свободы
    ci_left = xn_mean + s * np.sqrt(xn_var / n)   # реализация левой границы доверительного интервала
    ci_right = xn_mean - s * np.sqrt(xn_var / n)  # реализация правой границы доверительного интервала
    is_ci[i] = (ci_left <= mu) & (ci_right >= mu) # проверяем, попадает ли истинное
                                                  # значние в доверительный интервал
# Убеждаемся, что доля попаданий параметр mu
# в реализации доверительных интервал крайне
# близка к уровню доверия
np.mean(is_ci)

# --------
# Часть №4. Доверительный интервал для
#           разности математических ожиданий
# --------

# Сформируем две независимые выборки
np.random.seed(123)                               # для воспроизводимости результатов, полученных с использованием
n_x = 20                                          # объем первой выборки
n_y = 30                                          # объем второй выборки
mu_x = 5                                          # математическое ожидание
mu_y = 10                                         # математическое ожидание второй выборки
sigma_x = 2                                       # стандартное отклонение первой выборки
sigma_y = 2                                       # стандартное отклонение второй выборки
x = norm.rvs(mu_x, sigma_x, n_x)                  # реализация первой выборки
y = norm.rvs(mu_y, sigma_y, n_y)                  # реализация второй выборки

# Посчитаем некоторые предварительные значения
x_mean = np.mean(x)                               # выборочное среднее
y_mean = np.mean(y)
x_var = np.var(x, ddof = 1)                       # исправленная (скорректированная) выборочная дисперсия
y_var = np.var(y, ddof = 1)

# Построим симметричный (1-a)*100-процентный доверительный
# интервал для разности математических ожиданий, то есть
# для mu_x - mu_y
a = 0.05                                                # уровень доверия (1 - a), например,
                                                        # при a = 0.05 получаем уровень доверия 0.95
    # при известной дисперсии
z = norm.ppf(a / 2)                                     # квантиль уровня (a / 2) стандартного
                                                        # нормального распределения
sigma_xy = np.sqrt((sigma_x ** 2) / n_x +
                   (sigma_y ** 2) / n_y)                # дисперсия разности выборочных средних
ci4_left = (x_mean - y_mean) + z * sigma_xy             # реализация левой границы доверительного интервала
ci4_right = (x_mean - y_mean) - z * sigma_xy            # реализация правой границы доверительного интервала
ci4 = [ci4_left, ci4_right]                             # реализация доверительного интеврала
    # при неизвестных, но предположительно
    # равных дисперсиях
s = t.ppf(a / 2, df = n_x + n_y - 2)                    # квантиль уровня (a / 2) распределения
                                                        # Стьбдента с (n_x + n_y - 2) степенью свободы
sigma_xy_est = np.sqrt((x_var * (n_x - 1) +
                        y_var * (n_y - 1)) /
                        (n_x + n_y - 2))                # оценка дисперсии разности выборочных средних
ci5_left = (x_mean - y_mean) + s * sigma_xy_est         # реализация левой границы доверительного интервала
ci5_right = (x_mean - y_mean) - s * sigma_xy_est        # реализация правой границы доверительного интервала
ci5 = [ci5_left, ci5_right]                             # реализация доверительного интеврала

# --------
# Часть №5. Доверительный интервал для
#           отношения дисперсий
# --------

# Построим симметричный (1-a)*100-процентный
# доверительный интервал для отношения
# дисперсий (sigma_x / sigma_y) ^ 2
a = 0.05                                                # уровень доверия (1 - a), например,
                                                        # при a = 0.05 получаем уровень доверия 0.95
F_lower = f.ppf(a / 2,                                  # квантиль уровня (a / 2) распределения
                dfn = n_y - 1,                          # распределения Фишера с (n_x - 1)
                dfd = n_x - 1)                          # и (n_y - 1) степенями свободы
F_upper = f.ppf(1 - a / 2,                              # квантиль уровня (1 - a / 2) распределения
                dfn = n_y - 1,                          # распределения Фишера с (n_x - 1)
                dfd = n_x - 1)                          # и (n_y - 1) степенями свободы
ci6_left = (x_var / y_var) * F_lower                    # реализация левой границы доверительного интервала
ci6_right = (x_var / y_var) * F_upper                   # реализация правой границы доверительного интервала
ci6 = [ci6_left, ci6_right]                             # реализация доверительного интеврала

# Задания
# 1. Имеется реализация выборки (1, 2, 5, 3, 0, -2) из
#    нормального распределения с математическим ожиданием 3
#    и дисперсией 2. Найдите реализацию 80%-го доверительного
#    интервала для:
#    1)     математического ожидания при известной дисперсии
#    2)     математического ожидания при неизвестной дисперсии
#    3)     дисперсии
# 2. Напишите функции, позволяющие рассчитывать, для
#    выборок из нормального распределения, доверительные
#    интервалы заданного уровня для:
#    1)     математического ожидания при известной дисперсии
#    2)     математического ожидания при неизвестной дисперсии
#    3)     дисперсии
# 3. Повторите задание №1 используя функции, написанные в задании №2
# 4. Имеется реализация выборки (1, 2, 5, 3, 0, -2) из
#    нормального распределения с математическим ожиданием 3
#    и дисперсией 5. Кроме того, имеется реализация другой
#    выборки (-2, 0, 3, 8, 1) с математическим ожиданием 2
#    и дисперсей 5. Найдите реализации 80%-х доверительных
#    интервалов для:
#    1)     разницы математических ожиданий при известных дисперсиях
#    2)     разницы математических ожиданий при неизвестных,
#           но равных дисперсиях
# 5. Имеется реализации выборок (1, 2, 5, 3, 0, -2) и
#    (-2, 0, 3, 8, 1). Найдите реализацию 80%-го доверительного
#    интервала для отношения дисперсий.
# 6. Повторите задания №4 и №5 используя самостоятельно
#    запрограммированные для общего случая функции, то
#    есть по аналогии с заданием №2
# 7. Повторите эксперимент из раздела №3 для доверительного
#    интервала для отношений дисперсий.
