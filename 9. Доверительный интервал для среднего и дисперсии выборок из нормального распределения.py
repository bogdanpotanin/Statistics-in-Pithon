# --------
# Потанин Богдан Станиславович
# Математическая Статистика в Python
# Урок 9. Доверительные интервалы для выборок из
#         нормального распределения
# --------

import sys
import math
import pandas as pd
import numpy as np
import scipy
import matplotlib.pyplot as plt
import seaborn
from scipy.stats import t, chi2, f, norm, poisson, \
     binom, uniform, multivariate_normal, expon
from scipy.optimize import approx_fprime, minimize, line_search

np.set_printoptions(suppress = True)              # уберем scientific notation

# --------
# Часть №1. Доверительный интервал для
#           математического ожидания
# --------

# Сгенерируем выборку из
# нормального распределения
np.random.seed(123)                               # для воспроизводимости результатов, полученных с использованием
n = 20                                            # объем выборки
mu = 5                                            # математическое ожидание
sigma = 10                                        # стандартное отклонение
x = norm.rvs(mu, sigma, n)                        # реализация выборки из нормального распределения
                                                  # с соответствующими параметрами

# Посчитаем некоторые предварительные значения
x_mean = np.mean(x)                               # выборочное среднее
x_var = np.var(x, ddof = 1)                       # исправленная (скорректированная) выборочная дисперсия

# Построим симметричный (1-a)*100-процентный доверительный
# интервал для параметра mu (математического ожидания)
a = 0.05                                                # уровень доверия (1 - a), например,
                                                        # при a = 0.05 получаем уровень доверия 0.95
    # при известной дисперсии
z = norm.ppf(a / 2)                                     # квантиль уровня (a / 2) стандартного
                                                        # нормального распределения
ci1_left = x_mean + z * sigma / np.sqrt(n)              # реализация левой границы доверительного интервала
ci1_right = x_mean - z * sigma / np.sqrt(n)             # реализация правой границы доверительного интервала
ci1 = [ci1_left, ci1_right]                             # реализация доверительного интеврала
    # при неизвестной дисперсии
s = t.ppf(a / 2, df = n - 1)                            # квантиль уровня (a / 2) распределения
                                                        # Стьбдента с (n - 1) степенью свободы
ci2_left = x_mean + s * np.sqrt(x_var / n)              # реализация левой границы доверительного интервала
ci2_right = x_mean - s * np.sqrt(x_var / n)             # реализация правой границы доверительного интервала
ci2 = [ci2_left, ci2_right]                             # реализация доверительного интеврала

# --------
# Часть №2. Доверительный интервал для
#           дисперсии
# --------

# Построим симметричный (1-a)*100-процентный доверительный
# интервал для параметра дисперсии, то есть для (sigma ^ 2)
a = 0.05                                                # уровень доверия (1 - a), например,
                                                        # при a = 0.05 получаем уровень доверия 0.95
x_var * (n - 1)
xi_lower = chi2.ppf(a / 2, df = n - 1)                  # квантиль уровня (a / 2) распределения
                                                        # Хи-квадрат с (n - 1) степенью свободы
xi_upper = chi2.ppf(1 - a / 2, df = n - 1)              # квантиль уровня a / 2 распределения
                                                        # Хи-квадрат с (n - 1) степенью свободы
ci3_left = (n - 1) * x_var / xi_upper                   # реализация левой границы доверительного интервала
ci3_right = (n - 1) * x_var / xi_lower                  # реализация правой границы доверительного интервала
ci3 = [ci3_left, ci3_right]                             # реализация доверительного интеврала

# --------
# Часть №3. Эксперименты с доверительными интервалами
# --------

# Сгенерируем m выборок и посмотрим долю случаев,
# когда истинное значение параметра mu попадает
# в реализацию (1-a)*100 доверительного интервала
# при неизвестной дисперсии
np.random.seed(123)                               # для воспроизводимости результатов, полученных с использованием
m = 1000                                          # число экспериментов
n = 20                                            # объем выборки
mu = 5                                            # математическое ожидание
sigma = 10                                        # стандартное отклонение
a = 0.05                                          # уровень доверия (1 - a), например,
                                                  # при a = 0.05 получаем уровень доверия 0.95
is_ci = np.zeros(m)                               # вектор, i-е значение которо принимает значение 1,
                                                  # если параметр mu попадает в реализацию доверительного
                                                  # интервала, построенного по i-й выборке, и 0 - иначе.
is_ci2 = np.zeros(m)                              # вектор, i-е значение которого принимает значение 1,
                                                  # если параметр mu попадает в реализацию доверительного
                                                  # интервала, построенного по 1-й выборке, и 0 - иначе.
for i in range(0, m):
    x_new = norm.rvs(mu, sigma, n)                # очередная выборка
    xn_mean = np.mean(x_new)                      # выборочное среднее
    xn_var = np.var(x_new, ddof = 1)              # исправленная (скорректированная) выборочная дисперсия
    s = t.ppf(a / 2, df = n - 1)                  # квантиль уровня (a / 2) распределения
                                                  # Стьбдента с (n - 1) степенью свободы
    ci_left = xn_mean + s * np.sqrt(xn_var / n)   # реализация левой границы доверительного интервала
    ci_right = xn_mean - s * np.sqrt(xn_var / n)  # реализация правой границы доверительного интервала
    is_ci[i] = (ci_left <= mu) & (ci_right >= mu) # проверяем, попадает ли истинное
                                                  # значние в доверительный интервал

# Убеждаемся, что доля попаданий параметр mu
# в реализации доверительных интервал крайне
# близка к уровню доверия
np.mean(is_ci)

# Задания
# 1. Имеется реализация выборки (1, 2, 5, 3, 0, -2) из
#    нормального распределения с математическим ожиданием 3
#    и дисперсией 2. Найдите реализации доверительных
#    интервалов для:
#    1)     математического ожидания при известной дисперсии
#    2)     математического ожидания при неизвестной дисперсии
#    3)     дисперсии
# 2. Напишите функции, позволяющие рассчитывать, для
#    выборок из нормального распределения, доверительные
#    интервалы заданного уровня для:
#    1)     математического ожидания при известной дисперсии
#    2)     математического ожидания при неизвестной дисперсии
#    3)     дисперсии
# 3. Повторите задание №1 используя функции, написанные в задании №2