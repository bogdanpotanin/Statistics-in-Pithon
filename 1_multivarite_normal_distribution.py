# --------
# Потанин Богдан Станиславович
# Математическая Статистика в Python :)
# Урок 1. Многомерное нормальное распределение
# --------

import numpy as np
import math
from scipy.stats import norm
from scipy.stats import multivariate_normal

#-----------------------------------------------------------
# Часть 1. Безусловное распределение
#-----------------------------------------------------------

# Рассмотрим случайные величины X и Y, чье совместное
# распределение является многомерным нормальным.
# Для удобства можно представить, что X и Y отражают
# доходности акций двух компаний.
# Зададим параметры маржинального распределения X и Y.
mu_X = 100                                                    # E(X)
mu_Y = 110                                                    # E(Y)
var_X = 25                                                    # Var(X)
var_Y = 36                                                    # Var(Y)
corr_XY = -0.5                                                # Corr(X, Y)
cov_XY = math.sqrt(var_X * var_Y) *  corr_XY                  # Cov(X, Y)
# Зададим параметры распределения случайного вектора (X, Y)
mu = np.array([mu_X, mu_Y])                                   # E((X, Y))
sigma = np.array([[var_X, cov_XY],                            # Cov((X, Y))
                  [cov_XY, var_Y]])

# Разберемся, как работать с многомерным нормальным
# распределением используясь класс multivariate_normal
# Ссылка: https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.multivariate_normal.html

# Вспомним, что для случайного вектора (X, Y) его
# функия распределения F(x, y) определяется как:
# F(x, y) = P(X <= x, Y <= y).

# Рассчитаем вероятность P(X <= 95, Y <= 125)
# с использованием функции распределения
# многомерного нормального распределения
multivariate_normal.cdf(x = [95, 125],             # точка, в которой осуществляется расчет, то есть (x, y)
                        mean = mu,                 # E((X, Y))
                        cov = sigma)               # Cov((X, Y))

# Заменяя cdf на pdf можно рассчитать и функцию
# плотности f(x, y) случайного вектора (X, Y)
# в точке f(95, 125)
multivariate_normal.pdf(x = [95, 125],             # точка, в которой осуществляется расчет, то есть (x, y)
                        mean = mu,                 # E((X, Y))
                        cov = sigma)               # Cov((X, Y))

# Пусть A и B - детерминоваронные матрицы
# подходящих размеров, где A - не сингулярна, тогда:
# A(X, Y)' + B ~ N(AE((X, Y))' + B, ACov((X, Y))A'),
# где (X, Y)' - транспонированный вектор (X, Y)

# Пользуясь свойствами многомерного нормального
# распределения найдем распределение
# случайного вектора (Z, W) = (2X - Y, 5Y + 10).
# Чтобы получить этот вектор из вектора (X, Y)
# введем следующие матрицы.
A = np.array([[2, -1], [0, 5]])
B = np.array([0, 10])
# Найдем параметры распределения (Z, W)
mu_new = np.matmul(A, mu) + B                      # E((Z, W))
sigma_new = np.matmul(np.matmul(A, sigma),         # Cov((Z, W))
                      np.transpose(A))

# Используя найденные параметры рассчитаем:
# P(2X - Y <= 100, 5Y + 10 <= 600)
multivariate_normal.cdf(x = [100, 600],            # точка, в которой осуществляется расчет, то есть (z, w)
                        mean = mu_new,             # E((Z, W)) = E((2X - Y, 5Y + 10))
                        cov = sigma_new)           # Cov((Z, W)) = Cov((2X - Y, 5Y + 10))

#-----------------------------------------------------------
# Часть 2. Условное распределение
#-----------------------------------------------------------

# Найдем параметры распределения (X | Y = 115)
cond = 115
mu_cond = mu_X  + np.sqrt(var_X / var_Y) * \
          corr_XY * (cond - mu_Y)                # E(X | Y = 115)
var_cond = (1 - corr_XY ** 2) * var_X            # Var(X | Y = 115)

# Рассчитаем вероятность P(X <= 95 | Y = 115)
# с использованием функции распределения
# многомерного нормального распределения
norm.cdf(x = 95,                                 # точка, в которой осуществляется расчет, то есть x
         loc = mu_cond,                          # E(X | Y = 115)
         scale = math.sqrt(var_cond))            # Var(X | Y = 115)

# Задания
# 1. Совместное распределение случайных величин
#    X и Y является многомерным нормальным.
#    Кроме того, известно, что:
#    E(X) = 5, E(Y) = 2, Cov(X, Y) = 10,
#    Var(X) = Var(Y) = 25.
#    Рассчитайте:
#    1)     Corr(X, Y), E((X, Y)) и Cov((X, Y))
#    2)     P(X <= 7, Y <= 3)
#    3*)    P(X <= 7, Y >= 3)
#    4)     P(X + 5Y <= 20)
#    5)     P(X + 5Y <= 20, X - Y <= 2)
#    6)     P(X - Y <= 2, 2X <= 15)
#    7*)    P(X - Y >= 2, 2X <= 15)
#    8*)    P(X <= 10, Y <= 5, X + Y <= 12)
#    Подсказка: P(X <= x, Y >= y) = P(X <= x, -Y <= -y)
# 2. Для случайного вектора из предыдущего
#    задания найдите:
#    1)     E(X | Y = 1)
#    2)     Var(X | Y = 1)
#    3)     P(X <= 3 | Y = 1)
#    4)     P(X >= 5 | Y = 1)
#    5*)    P(X >= 5 | X + Y = 10)
#    Подсказка: Рассмотрите распределение вектора (X, X + Y), а затем
#               распределение вектора ((X, X + Y) | X + Y = 10)
# 3. Для случайного вектора (X, Y), имеющего многомерное нормальное
#    распределение напишите функции, позволяющие рассчитывать:
#    1)     Условное математическое ожидание E(X | Y = a)
#    2)     Условную дисперсию Var(X | Y = a)
#    3)     Условную функцию распределения P(X <= x | Y = a)
# Примечание: входные параметры для функций должны быть такими же, как
# у multivariate_normal.cdf, а также отдельный параметр "a" для условных
# значений
